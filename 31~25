*31번 : 수열과 구간 쿼리 4
#include <stdio.h>
#include <stdlib.h>

int* solution(int arr[], size_t arr_len, int** queries, size_t queries_rows)
{
 
    for (size_t q = 0; q < queries_rows; ++q)
    {
        int s = queries[q][0];  // 시작 인덱스
        int e = queries[q][1];  // 끝 인덱스
        int k = queries[q][2];  // 배수 조건

        // s ≤ i ≤ e 범위 내에서 i가 k의 배수이면 arr[i]에 1을 더함
        for (int i = s; i <= e; ++i)
        {
            if (i % k == 0)
            {
                arr[i]++;
            }
        }
    }

    return arr;  // 수정된 배열을 반환
}

int main(void)
{
 
    int arr[] = {0, 1, 2, 4, 3};
    size_t arr_len = sizeof(arr) / sizeof(arr[0]);

    // queries 2차원 배열
    int q1[] = {0, 4, 1};
    int q2[] = {0, 3, 2};
    int q3[] = {0, 3, 3};
    int* queries[] = {q1, q2, q3};
    size_t queries_rows = sizeof(queries) / sizeof(queries[0]);

    // solution 함수 호출
    int* result = solution(arr, arr_len, queries, queries_rows);

    // 결과 출력
    printf("[");
    for (size_t i = 0; i < arr_len; ++i)
    {
        printf("%d", result[i]);
        if (i < arr_len - 1)
        {
            printf(", ");
        }
    }
    printf("]\n");

    return 0;
}

*32 : 배열 만들기 2
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int* solution(int l, int r)
{
     // return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게
  // 변경해주세요.
  int *answer = (int *)malloc(sizeof(int) * (r - l));
  int index = 0;
  for (int i = l; i <= r; i++)
  {
    int num = i;
    bool isOkay = false;
    while (1)
    {
      if (num % 10 == 0 || num % 10 == 5)
      {
        isOkay = true;
        if (num < 10)
        {
          break;
        }
        else
        {
          num /= 10;
        }
      }
      else
      {
        isOkay = false;
        break;
      }
    }
    if (isOkay)
    {
      answer[index++] = i;
      printf("%d\n", answer[index - 1]);
    }
  }
      if (index == 0)
      {
    answer[index++] = -1;
  }
  answer[index] = '\0';
  return answer;
}

*33번 : 주사위 게임 2
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int* solution(int start, int end) {
    // return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.
    int* answer = (int*)malloc((end - start) * sizeof(int) +100);
    int i = 0;
    for(;start<=end;start++){
        answer[i] = start;
        i++;
    }
    return answer;
}

*34번 : 콜라츠 수열 만들기 
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int* solution(int n) {
    // return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.
    int* answer = (int*)malloc(1000);
    int ansIdx = 0;
    while(n > 1) {
        answer[ansIdx++] = n;
        n = n % 2 == 0 ? n / 2 : 3 * n + 1;
    }
    answer[ansIdx++] = n;
    answer = (int*)realloc(answer, sizeof(int) * ansIdx);
    return answer;
}

*35번 : 배열 만들기 4
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int* solution(int arr[], size_t arr_len) 
{
    int* stk = (int*)malloc(sizeof(int) * 100000);
    int i = 0;
    int idx = 0;
    
    while (i < arr_len) 
    {
        if (idx == 0)
            stk[idx++] = arr[i++];
        else 
        {
            if (stk[idx - 1] < arr[i])
                stk[idx++] = arr[i++];
            else 
            {
                stk[idx - 1] = 0;
                idx--;
            }
        }
    }
    
    return stk;
}
